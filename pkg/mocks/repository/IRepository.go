// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/greencoda/tasq/internal/model"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	time "time"

	uuid "github.com/google/uuid"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// CleanTasks provides a mock function with given fields: ctx, minimumAge
func (_m *IRepository) CleanTasks(ctx context.Context, minimumAge time.Duration) (int64, error) {
	ret := _m.Called(ctx, minimumAge)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) int64); ok {
		r0 = rf(ctx, minimumAge)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(ctx, minimumAge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DB provides a mock function with given fields:
func (_m *IRepository) DB() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// DeleteTask provides a mock function with given fields: ctx, task
func (_m *IRepository) DeleteTask(ctx context.Context, task *model.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields: ctx
func (_m *IRepository) Migrate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PingTasks provides a mock function with given fields: ctx, taskIDs, visibilityTimeout
func (_m *IRepository) PingTasks(ctx context.Context, taskIDs []uuid.UUID, visibilityTimeout time.Duration) ([]*model.Task, error) {
	ret := _m.Called(ctx, taskIDs, visibilityTimeout)

	var r0 []*model.Task
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, time.Duration) []*model.Task); ok {
		r0 = rf(ctx, taskIDs, visibilityTimeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID, time.Duration) error); ok {
		r1 = rf(ctx, taskIDs, visibilityTimeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PollTasks provides a mock function with given fields: ctx, types, queues, visibilityTimeout, ordering, limit
func (_m *IRepository) PollTasks(ctx context.Context, types []string, queues []string, visibilityTimeout time.Duration, ordering []string, limit int) ([]*model.Task, error) {
	ret := _m.Called(ctx, types, queues, visibilityTimeout, ordering, limit)

	var r0 []*model.Task
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string, time.Duration, []string, int) []*model.Task); ok {
		r0 = rf(ctx, types, queues, visibilityTimeout, ordering, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, []string, time.Duration, []string, int) error); ok {
		r1 = rf(ctx, types, queues, visibilityTimeout, ordering, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterError provides a mock function with given fields: ctx, task, errTask
func (_m *IRepository) RegisterError(ctx context.Context, task *model.Task, errTask error) (*model.Task, error) {
	ret := _m.Called(ctx, task, errTask)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task, error) *model.Task); ok {
		r0 = rf(ctx, task, errTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Task, error) error); ok {
		r1 = rf(ctx, task, errTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterFailure provides a mock function with given fields: ctx, task
func (_m *IRepository) RegisterFailure(ctx context.Context, task *model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) *model.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterStart provides a mock function with given fields: ctx, task
func (_m *IRepository) RegisterStart(ctx context.Context, task *model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) *model.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSuccess provides a mock function with given fields: ctx, task
func (_m *IRepository) RegisterSuccess(ctx context.Context, task *model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) *model.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequeueTask provides a mock function with given fields: ctx, task
func (_m *IRepository) RequeueTask(ctx context.Context, task *model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) *model.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitTask provides a mock function with given fields: ctx, task
func (_m *IRepository) SubmitTask(ctx context.Context, task *model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *model.Task
	if rf, ok := ret.Get(0).(func(context.Context, *model.Task) *model.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepository(t mockConstructorTestingTNewIRepository) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
