// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/greencoda/tasq"
	mock "github.com/stretchr/testify/mock"
)

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

type IRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IRepository) EXPECT() *IRepository_Expecter {
	return &IRepository_Expecter{mock: &_m.Mock}
}

// CleanTasks provides a mock function for the type IRepository
func (_mock *IRepository) CleanTasks(ctx context.Context, minimumAge time.Duration) (int64, error) {
	ret := _mock.Called(ctx, minimumAge)

	if len(ret) == 0 {
		panic("no return value specified for CleanTasks")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) (int64, error)); ok {
		return returnFunc(ctx, minimumAge)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Duration) int64); ok {
		r0 = returnFunc(ctx, minimumAge)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = returnFunc(ctx, minimumAge)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_CleanTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanTasks'
type IRepository_CleanTasks_Call struct {
	*mock.Call
}

// CleanTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - minimumAge time.Duration
func (_e *IRepository_Expecter) CleanTasks(ctx interface{}, minimumAge interface{}) *IRepository_CleanTasks_Call {
	return &IRepository_CleanTasks_Call{Call: _e.mock.On("CleanTasks", ctx, minimumAge)}
}

func (_c *IRepository_CleanTasks_Call) Run(run func(ctx context.Context, minimumAge time.Duration)) *IRepository_CleanTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Duration
		if args[1] != nil {
			arg1 = args[1].(time.Duration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IRepository_CleanTasks_Call) Return(n int64, err error) *IRepository_CleanTasks_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *IRepository_CleanTasks_Call) RunAndReturn(run func(ctx context.Context, minimumAge time.Duration) (int64, error)) *IRepository_CleanTasks_Call {
	_c.Call.Return(run)
	return _c
}

// CountTasks provides a mock function for the type IRepository
func (_mock *IRepository) CountTasks(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string) (int64, error) {
	ret := _mock.Called(ctx, taskStatuses, taskTypes, queues)

	if len(ret) == 0 {
		panic("no return value specified for CountTasks")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tasq.TaskStatus, []string, []string) (int64, error)); ok {
		return returnFunc(ctx, taskStatuses, taskTypes, queues)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tasq.TaskStatus, []string, []string) int64); ok {
		r0 = returnFunc(ctx, taskStatuses, taskTypes, queues)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []tasq.TaskStatus, []string, []string) error); ok {
		r1 = returnFunc(ctx, taskStatuses, taskTypes, queues)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_CountTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountTasks'
type IRepository_CountTasks_Call struct {
	*mock.Call
}

// CountTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - taskStatuses []tasq.TaskStatus
//   - taskTypes []string
//   - queues []string
func (_e *IRepository_Expecter) CountTasks(ctx interface{}, taskStatuses interface{}, taskTypes interface{}, queues interface{}) *IRepository_CountTasks_Call {
	return &IRepository_CountTasks_Call{Call: _e.mock.On("CountTasks", ctx, taskStatuses, taskTypes, queues)}
}

func (_c *IRepository_CountTasks_Call) Run(run func(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string)) *IRepository_CountTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []tasq.TaskStatus
		if args[1] != nil {
			arg1 = args[1].([]tasq.TaskStatus)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 []string
		if args[3] != nil {
			arg3 = args[3].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *IRepository_CountTasks_Call) Return(n int64, err error) *IRepository_CountTasks_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *IRepository_CountTasks_Call) RunAndReturn(run func(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string) (int64, error)) *IRepository_CountTasks_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function for the type IRepository
func (_mock *IRepository) DeleteTask(ctx context.Context, task *tasq.Task, safeDelete bool) error {
	ret := _mock.Called(ctx, task, safeDelete)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task, bool) error); ok {
		r0 = returnFunc(ctx, task, safeDelete)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IRepository_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type IRepository_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task *tasq.Task
//   - safeDelete bool
func (_e *IRepository_Expecter) DeleteTask(ctx interface{}, task interface{}, safeDelete interface{}) *IRepository_DeleteTask_Call {
	return &IRepository_DeleteTask_Call{Call: _e.mock.On("DeleteTask", ctx, task, safeDelete)}
}

func (_c *IRepository_DeleteTask_Call) Run(run func(ctx context.Context, task *tasq.Task, safeDelete bool)) *IRepository_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *tasq.Task
		if args[1] != nil {
			arg1 = args[1].(*tasq.Task)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *IRepository_DeleteTask_Call) Return(err error) *IRepository_DeleteTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IRepository_DeleteTask_Call) RunAndReturn(run func(ctx context.Context, task *tasq.Task, safeDelete bool) error) *IRepository_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function for the type IRepository
func (_mock *IRepository) Migrate(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// IRepository_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type IRepository_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IRepository_Expecter) Migrate(ctx interface{}) *IRepository_Migrate_Call {
	return &IRepository_Migrate_Call{Call: _e.mock.On("Migrate", ctx)}
}

func (_c *IRepository_Migrate_Call) Run(run func(ctx context.Context)) *IRepository_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *IRepository_Migrate_Call) Return(err error) *IRepository_Migrate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IRepository_Migrate_Call) RunAndReturn(run func(ctx context.Context) error) *IRepository_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// PingTasks provides a mock function for the type IRepository
func (_mock *IRepository) PingTasks(ctx context.Context, taskIDs []uuid.UUID, visibilityTimeout time.Duration) ([]*tasq.Task, error) {
	ret := _mock.Called(ctx, taskIDs, visibilityTimeout)

	if len(ret) == 0 {
		panic("no return value specified for PingTasks")
	}

	var r0 []*tasq.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, time.Duration) ([]*tasq.Task, error)); ok {
		return returnFunc(ctx, taskIDs, visibilityTimeout)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, time.Duration) []*tasq.Task); ok {
		r0 = returnFunc(ctx, taskIDs, visibilityTimeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tasq.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []uuid.UUID, time.Duration) error); ok {
		r1 = returnFunc(ctx, taskIDs, visibilityTimeout)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_PingTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingTasks'
type IRepository_PingTasks_Call struct {
	*mock.Call
}

// PingTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - taskIDs []uuid.UUID
//   - visibilityTimeout time.Duration
func (_e *IRepository_Expecter) PingTasks(ctx interface{}, taskIDs interface{}, visibilityTimeout interface{}) *IRepository_PingTasks_Call {
	return &IRepository_PingTasks_Call{Call: _e.mock.On("PingTasks", ctx, taskIDs, visibilityTimeout)}
}

func (_c *IRepository_PingTasks_Call) Run(run func(ctx context.Context, taskIDs []uuid.UUID, visibilityTimeout time.Duration)) *IRepository_PingTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *IRepository_PingTasks_Call) Return(tasks []*tasq.Task, err error) *IRepository_PingTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *IRepository_PingTasks_Call) RunAndReturn(run func(ctx context.Context, taskIDs []uuid.UUID, visibilityTimeout time.Duration) ([]*tasq.Task, error)) *IRepository_PingTasks_Call {
	_c.Call.Return(run)
	return _c
}

// PollTasks provides a mock function for the type IRepository
func (_mock *IRepository) PollTasks(ctx context.Context, types []string, queues []string, visibilityTimeout time.Duration, ordering tasq.Ordering, limit int) ([]*tasq.Task, error) {
	ret := _mock.Called(ctx, types, queues, visibilityTimeout, ordering, limit)

	if len(ret) == 0 {
		panic("no return value specified for PollTasks")
	}

	var r0 []*tasq.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, []string, time.Duration, tasq.Ordering, int) ([]*tasq.Task, error)); ok {
		return returnFunc(ctx, types, queues, visibilityTimeout, ordering, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, []string, time.Duration, tasq.Ordering, int) []*tasq.Task); ok {
		r0 = returnFunc(ctx, types, queues, visibilityTimeout, ordering, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tasq.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []string, []string, time.Duration, tasq.Ordering, int) error); ok {
		r1 = returnFunc(ctx, types, queues, visibilityTimeout, ordering, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_PollTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollTasks'
type IRepository_PollTasks_Call struct {
	*mock.Call
}

// PollTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - types []string
//   - queues []string
//   - visibilityTimeout time.Duration
//   - ordering tasq.Ordering
//   - limit int
func (_e *IRepository_Expecter) PollTasks(ctx interface{}, types interface{}, queues interface{}, visibilityTimeout interface{}, ordering interface{}, limit interface{}) *IRepository_PollTasks_Call {
	return &IRepository_PollTasks_Call{Call: _e.mock.On("PollTasks", ctx, types, queues, visibilityTimeout, ordering, limit)}
}

func (_c *IRepository_PollTasks_Call) Run(run func(ctx context.Context, types []string, queues []string, visibilityTimeout time.Duration, ordering tasq.Ordering, limit int)) *IRepository_PollTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		var arg4 tasq.Ordering
		if args[4] != nil {
			arg4 = args[4].(tasq.Ordering)
		}
		var arg5 int
		if args[5] != nil {
			arg5 = args[5].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *IRepository_PollTasks_Call) Return(tasks []*tasq.Task, err error) *IRepository_PollTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *IRepository_PollTasks_Call) RunAndReturn(run func(ctx context.Context, types []string, queues []string, visibilityTimeout time.Duration, ordering tasq.Ordering, limit int) ([]*tasq.Task, error)) *IRepository_PollTasks_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeTasks provides a mock function for the type IRepository
func (_mock *IRepository) PurgeTasks(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string, safeDelete bool) (int64, error) {
	ret := _mock.Called(ctx, taskStatuses, taskTypes, queues, safeDelete)

	if len(ret) == 0 {
		panic("no return value specified for PurgeTasks")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tasq.TaskStatus, []string, []string, bool) (int64, error)); ok {
		return returnFunc(ctx, taskStatuses, taskTypes, queues, safeDelete)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tasq.TaskStatus, []string, []string, bool) int64); ok {
		r0 = returnFunc(ctx, taskStatuses, taskTypes, queues, safeDelete)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []tasq.TaskStatus, []string, []string, bool) error); ok {
		r1 = returnFunc(ctx, taskStatuses, taskTypes, queues, safeDelete)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_PurgeTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeTasks'
type IRepository_PurgeTasks_Call struct {
	*mock.Call
}

// PurgeTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - taskStatuses []tasq.TaskStatus
//   - taskTypes []string
//   - queues []string
//   - safeDelete bool
func (_e *IRepository_Expecter) PurgeTasks(ctx interface{}, taskStatuses interface{}, taskTypes interface{}, queues interface{}, safeDelete interface{}) *IRepository_PurgeTasks_Call {
	return &IRepository_PurgeTasks_Call{Call: _e.mock.On("PurgeTasks", ctx, taskStatuses, taskTypes, queues, safeDelete)}
}

func (_c *IRepository_PurgeTasks_Call) Run(run func(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string, safeDelete bool)) *IRepository_PurgeTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []tasq.TaskStatus
		if args[1] != nil {
			arg1 = args[1].([]tasq.TaskStatus)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 []string
		if args[3] != nil {
			arg3 = args[3].([]string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *IRepository_PurgeTasks_Call) Return(n int64, err error) *IRepository_PurgeTasks_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *IRepository_PurgeTasks_Call) RunAndReturn(run func(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string, safeDelete bool) (int64, error)) *IRepository_PurgeTasks_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterError provides a mock function for the type IRepository
func (_mock *IRepository) RegisterError(ctx context.Context, task *tasq.Task, errTask error) (*tasq.Task, error) {
	ret := _mock.Called(ctx, task, errTask)

	if len(ret) == 0 {
		panic("no return value specified for RegisterError")
	}

	var r0 *tasq.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task, error) (*tasq.Task, error)); ok {
		return returnFunc(ctx, task, errTask)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task, error) *tasq.Task); ok {
		r0 = returnFunc(ctx, task, errTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasq.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *tasq.Task, error) error); ok {
		r1 = returnFunc(ctx, task, errTask)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_RegisterError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterError'
type IRepository_RegisterError_Call struct {
	*mock.Call
}

// RegisterError is a helper method to define mock.On call
//   - ctx context.Context
//   - task *tasq.Task
//   - errTask error
func (_e *IRepository_Expecter) RegisterError(ctx interface{}, task interface{}, errTask interface{}) *IRepository_RegisterError_Call {
	return &IRepository_RegisterError_Call{Call: _e.mock.On("RegisterError", ctx, task, errTask)}
}

func (_c *IRepository_RegisterError_Call) Run(run func(ctx context.Context, task *tasq.Task, errTask error)) *IRepository_RegisterError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *tasq.Task
		if args[1] != nil {
			arg1 = args[1].(*tasq.Task)
		}
		var arg2 error
		if args[2] != nil {
			arg2 = args[2].(error)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *IRepository_RegisterError_Call) Return(task1 *tasq.Task, err error) *IRepository_RegisterError_Call {
	_c.Call.Return(task1, err)
	return _c
}

func (_c *IRepository_RegisterError_Call) RunAndReturn(run func(ctx context.Context, task *tasq.Task, errTask error) (*tasq.Task, error)) *IRepository_RegisterError_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterFinish provides a mock function for the type IRepository
func (_mock *IRepository) RegisterFinish(ctx context.Context, task *tasq.Task, finishStatus tasq.TaskStatus) (*tasq.Task, error) {
	ret := _mock.Called(ctx, task, finishStatus)

	if len(ret) == 0 {
		panic("no return value specified for RegisterFinish")
	}

	var r0 *tasq.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task, tasq.TaskStatus) (*tasq.Task, error)); ok {
		return returnFunc(ctx, task, finishStatus)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task, tasq.TaskStatus) *tasq.Task); ok {
		r0 = returnFunc(ctx, task, finishStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasq.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *tasq.Task, tasq.TaskStatus) error); ok {
		r1 = returnFunc(ctx, task, finishStatus)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_RegisterFinish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterFinish'
type IRepository_RegisterFinish_Call struct {
	*mock.Call
}

// RegisterFinish is a helper method to define mock.On call
//   - ctx context.Context
//   - task *tasq.Task
//   - finishStatus tasq.TaskStatus
func (_e *IRepository_Expecter) RegisterFinish(ctx interface{}, task interface{}, finishStatus interface{}) *IRepository_RegisterFinish_Call {
	return &IRepository_RegisterFinish_Call{Call: _e.mock.On("RegisterFinish", ctx, task, finishStatus)}
}

func (_c *IRepository_RegisterFinish_Call) Run(run func(ctx context.Context, task *tasq.Task, finishStatus tasq.TaskStatus)) *IRepository_RegisterFinish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *tasq.Task
		if args[1] != nil {
			arg1 = args[1].(*tasq.Task)
		}
		var arg2 tasq.TaskStatus
		if args[2] != nil {
			arg2 = args[2].(tasq.TaskStatus)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *IRepository_RegisterFinish_Call) Return(task1 *tasq.Task, err error) *IRepository_RegisterFinish_Call {
	_c.Call.Return(task1, err)
	return _c
}

func (_c *IRepository_RegisterFinish_Call) RunAndReturn(run func(ctx context.Context, task *tasq.Task, finishStatus tasq.TaskStatus) (*tasq.Task, error)) *IRepository_RegisterFinish_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterStart provides a mock function for the type IRepository
func (_mock *IRepository) RegisterStart(ctx context.Context, task *tasq.Task) (*tasq.Task, error) {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for RegisterStart")
	}

	var r0 *tasq.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task) (*tasq.Task, error)); ok {
		return returnFunc(ctx, task)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task) *tasq.Task); ok {
		r0 = returnFunc(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasq.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *tasq.Task) error); ok {
		r1 = returnFunc(ctx, task)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_RegisterStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterStart'
type IRepository_RegisterStart_Call struct {
	*mock.Call
}

// RegisterStart is a helper method to define mock.On call
//   - ctx context.Context
//   - task *tasq.Task
func (_e *IRepository_Expecter) RegisterStart(ctx interface{}, task interface{}) *IRepository_RegisterStart_Call {
	return &IRepository_RegisterStart_Call{Call: _e.mock.On("RegisterStart", ctx, task)}
}

func (_c *IRepository_RegisterStart_Call) Run(run func(ctx context.Context, task *tasq.Task)) *IRepository_RegisterStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *tasq.Task
		if args[1] != nil {
			arg1 = args[1].(*tasq.Task)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IRepository_RegisterStart_Call) Return(task1 *tasq.Task, err error) *IRepository_RegisterStart_Call {
	_c.Call.Return(task1, err)
	return _c
}

func (_c *IRepository_RegisterStart_Call) RunAndReturn(run func(ctx context.Context, task *tasq.Task) (*tasq.Task, error)) *IRepository_RegisterStart_Call {
	_c.Call.Return(run)
	return _c
}

// RequeueTask provides a mock function for the type IRepository
func (_mock *IRepository) RequeueTask(ctx context.Context, task *tasq.Task) (*tasq.Task, error) {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for RequeueTask")
	}

	var r0 *tasq.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task) (*tasq.Task, error)); ok {
		return returnFunc(ctx, task)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task) *tasq.Task); ok {
		r0 = returnFunc(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasq.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *tasq.Task) error); ok {
		r1 = returnFunc(ctx, task)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_RequeueTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequeueTask'
type IRepository_RequeueTask_Call struct {
	*mock.Call
}

// RequeueTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task *tasq.Task
func (_e *IRepository_Expecter) RequeueTask(ctx interface{}, task interface{}) *IRepository_RequeueTask_Call {
	return &IRepository_RequeueTask_Call{Call: _e.mock.On("RequeueTask", ctx, task)}
}

func (_c *IRepository_RequeueTask_Call) Run(run func(ctx context.Context, task *tasq.Task)) *IRepository_RequeueTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *tasq.Task
		if args[1] != nil {
			arg1 = args[1].(*tasq.Task)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IRepository_RequeueTask_Call) Return(task1 *tasq.Task, err error) *IRepository_RequeueTask_Call {
	_c.Call.Return(task1, err)
	return _c
}

func (_c *IRepository_RequeueTask_Call) RunAndReturn(run func(ctx context.Context, task *tasq.Task) (*tasq.Task, error)) *IRepository_RequeueTask_Call {
	_c.Call.Return(run)
	return _c
}

// ScanTasks provides a mock function for the type IRepository
func (_mock *IRepository) ScanTasks(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string, ordering tasq.Ordering, limit int) ([]*tasq.Task, error) {
	ret := _mock.Called(ctx, taskStatuses, taskTypes, queues, ordering, limit)

	if len(ret) == 0 {
		panic("no return value specified for ScanTasks")
	}

	var r0 []*tasq.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tasq.TaskStatus, []string, []string, tasq.Ordering, int) ([]*tasq.Task, error)); ok {
		return returnFunc(ctx, taskStatuses, taskTypes, queues, ordering, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []tasq.TaskStatus, []string, []string, tasq.Ordering, int) []*tasq.Task); ok {
		r0 = returnFunc(ctx, taskStatuses, taskTypes, queues, ordering, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*tasq.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []tasq.TaskStatus, []string, []string, tasq.Ordering, int) error); ok {
		r1 = returnFunc(ctx, taskStatuses, taskTypes, queues, ordering, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_ScanTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanTasks'
type IRepository_ScanTasks_Call struct {
	*mock.Call
}

// ScanTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - taskStatuses []tasq.TaskStatus
//   - taskTypes []string
//   - queues []string
//   - ordering tasq.Ordering
//   - limit int
func (_e *IRepository_Expecter) ScanTasks(ctx interface{}, taskStatuses interface{}, taskTypes interface{}, queues interface{}, ordering interface{}, limit interface{}) *IRepository_ScanTasks_Call {
	return &IRepository_ScanTasks_Call{Call: _e.mock.On("ScanTasks", ctx, taskStatuses, taskTypes, queues, ordering, limit)}
}

func (_c *IRepository_ScanTasks_Call) Run(run func(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string, ordering tasq.Ordering, limit int)) *IRepository_ScanTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []tasq.TaskStatus
		if args[1] != nil {
			arg1 = args[1].([]tasq.TaskStatus)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 []string
		if args[3] != nil {
			arg3 = args[3].([]string)
		}
		var arg4 tasq.Ordering
		if args[4] != nil {
			arg4 = args[4].(tasq.Ordering)
		}
		var arg5 int
		if args[5] != nil {
			arg5 = args[5].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *IRepository_ScanTasks_Call) Return(tasks []*tasq.Task, err error) *IRepository_ScanTasks_Call {
	_c.Call.Return(tasks, err)
	return _c
}

func (_c *IRepository_ScanTasks_Call) RunAndReturn(run func(ctx context.Context, taskStatuses []tasq.TaskStatus, taskTypes []string, queues []string, ordering tasq.Ordering, limit int) ([]*tasq.Task, error)) *IRepository_ScanTasks_Call {
	_c.Call.Return(run)
	return _c
}

// SubmitTask provides a mock function for the type IRepository
func (_mock *IRepository) SubmitTask(ctx context.Context, task *tasq.Task) (*tasq.Task, error) {
	ret := _mock.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for SubmitTask")
	}

	var r0 *tasq.Task
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task) (*tasq.Task, error)); ok {
		return returnFunc(ctx, task)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *tasq.Task) *tasq.Task); ok {
		r0 = returnFunc(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tasq.Task)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *tasq.Task) error); ok {
		r1 = returnFunc(ctx, task)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// IRepository_SubmitTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubmitTask'
type IRepository_SubmitTask_Call struct {
	*mock.Call
}

// SubmitTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task *tasq.Task
func (_e *IRepository_Expecter) SubmitTask(ctx interface{}, task interface{}) *IRepository_SubmitTask_Call {
	return &IRepository_SubmitTask_Call{Call: _e.mock.On("SubmitTask", ctx, task)}
}

func (_c *IRepository_SubmitTask_Call) Run(run func(ctx context.Context, task *tasq.Task)) *IRepository_SubmitTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *tasq.Task
		if args[1] != nil {
			arg1 = args[1].(*tasq.Task)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *IRepository_SubmitTask_Call) Return(task1 *tasq.Task, err error) *IRepository_SubmitTask_Call {
	_c.Call.Return(task1, err)
	return _c
}

func (_c *IRepository_SubmitTask_Call) RunAndReturn(run func(ctx context.Context, task *tasq.Task) (*tasq.Task, error)) *IRepository_SubmitTask_Call {
	_c.Call.Return(run)
	return _c
}
